#!/usr/bin/env python3
"""Assign _rlnGroupName to a star file generated by csparc2star.py."""

import sys
import argparse

import numpy as np
import pandas as pd
from tqdm import tqdm

import c2r


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description=__doc__
    )
    parser.add_argument('--relion_star', type=str, required=True, help='A RELION particle star file as the reference for _rlnGroupName assignments.')
    parser.add_argument('--csparc_star', type=str, required=True, help='The cryoSPARC star file generated with PyEM csparc2star.py, which you want to assign _rlnGroupName into.')
    parser.add_argument('--csparc_csg', type=str, required=True, help='The cryoSPARC .csg file of the same cryoSPARC job as --csparc_star.')
    parser.add_argument('--csparc_orig_csg', type=str, required=True, help='A cryoSPARC .csg file of a refinement job before symmetry expansion is applied.')
    parser.add_argument('--out_star', type=str, required=True, help='Output star file name.')
    args = parser.parse_args()
    print('##### Command #####\n\t' + ' '.join(sys.argv))
    args_print_str = '##### Input parameters #####\n'
    for opt, val in vars(args).items():
        args_print_str += '\t{} : {}\n'.format(opt, val)
    print(args_print_str)
    return args


def main():
    args = parse_args()

    # The _rlnGroupName source.
    print(f'Loading {args.relion_star}...')
    md_gr_src = c2r.RelionMetaData.load(args.relion_star)
    assert '_rlnImageName' in md_gr_src.df_data.columns, f'_rlnImageName does not exist in {args.relion_star}'
    assert '_rlnGroupNumber' in md_gr_src.df_data.columns, f'_rlnGroupNumber does not exist in {args.relion_star}'

    # cryoSPARC metadata of the expanded particles
    print(f'Loading {args.csparc_csg}...')
    md_cs = c2r.CryoSPARCMetaData.load(args.csparc_csg)
    # cryoSPARC starfile of the expanded particles
    print(f'Loading {args.csparc_star}...')
    md_cs_star = c2r.RelionMetaData.load(args.csparc_star)
    assert np.all(c2r.cs_to_imgids(md_cs.cs) == c2r.df_data_to_imgids(md_cs_star.df_data)), f'The particle ordering is different between {args.csparc_csg}:cs and {args.csparc_star}'
    assert len(md_cs_star.df_data) == len(md_cs.cs), f'The number of records differs between {args.csparc_star} and {args.csparc_csg}:cs.'
    assert len(md_cs_star.df_data) == len(md_cs.passthrough), f'The number of records differs between {args.csparc_star} and {args.csparc_csg}:passthrough'

    # cryoSPARC metadata of the particles before expansion
    print(f'Loading {args.csparc_orig_csg}...')
    md_cs_orig = c2r.CryoSPARCMetaData.load(args.csparc_orig_csg)

    # Output
    md_out = c2r.RelionMetaData(
        df_data=None, df_optics=md_cs_star.df_optics,
        data_type='data_particles'
    )

    print('Mapping particleid+imagename to _rlnGroupNumber...')
    ks = md_gr_src.df_data['_rlnImageName'].to_numpy(copy=True)
    for i in range(len(ks)):
        ks[i] = c2r.imgname_to_imgid(ks[i], rm_ext=True)
    vs = md_gr_src.df_data['_rlnGroupNumber'].to_numpy(copy=True)
    map_imgid_to_gr = dict(zip(ks, vs))

    # The UIDs of the original particle images before symmetry expansion
    uids_orig = list(md_cs_orig.cs['uid'])

    # The corresponding original UIDs of the expanded particles.
    src_uids = md_cs.passthrough['sym_expand/src_uid']

    print('Mapping src_uid to particleid+imagename...')
    imgids = []
    for src_uid in tqdm(src_uids):
        idx = uids_orig.index(src_uid)
        blobpath = md_cs_orig.cs['blob/path'][idx]
        blobidx = md_cs_orig.cs['blob/idx'][idx]
        imgid = c2r.blobpath_and_blobidx_to_imgid(blobpath, blobidx)
        imgids.append(imgid)

    print('Resolving _rlnGroupNumber...')
    grs = []
    for imgid in imgids:
        try:
            gr = map_imgid_to_gr[imgid]
        except KeyError:
            print(f'imgid {imgid} could not be found from source star file.')
            raise
        grs.append(gr)

    print('Saving output...')
    md_out_cols = list(md_cs_star.df_data.columns)
    md_out_cols.append('_rlnGroupNumber')
    md_out_data = md_cs_star.df_data.to_numpy(copy=True)
    md_out_data = np.concatenate((md_out_data, np.array(grs).reshape(-1, 1)), axis=1)
    md_out.df_data = pd.DataFrame(data=md_out_data, columns=md_out_cols)
    md_out.write(args.out_star)


if __name__ == '__main__':
    main()
